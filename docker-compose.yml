version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: worklog-postgres
    environment:
      POSTGRES_DB: worklog
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: worklog_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - worklog-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: worklog-backend
    environment:
      - DATABASE_URL=postgresql://postgres:worklog_password@postgres:5432/worklog
      - FLASK_ENV=production
      - PORT=5051
    ports:
      - "5051:5051"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5051/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - worklog-network

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: worklog-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - worklog-network

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: worklog-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - worklog-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: worklog-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - worklog-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  worklog-network:
    driver: bridge
